module.exports = {
  friendlyName: 'Update password and login',

  description:
    'Finish the password recovery flow by setting the new password and ' +
    'logging in the requesting user, based on the authenticity of their token.',

  inputs: {
    password: {
      description: 'The new, unencrypted password.',
      example: 'abc123v2',
      required: true,
    },

    token: {
      description: 'The password token that was generated by the `sendPasswordRecoveryEmail` endpoint.',
      example: 'gwa8gs8hgw9h2g9hg29hgwh9asdgh9q34$$$$$asdgasdggds',
      required: true,
    },
    language: {
      type: 'string',
      maxLength: 5,
    },
    honeypot: {
      type: 'string',
      custom: function (value) {
        return [...value].length <= 10;
      },
    },
  },

  exits: {
    success: {
      description: 'Password successfully updated, and requesting user agent is now logged in.',
    },

    invalidToken: {
      description: 'The provided password token is invalid, expired, or has already been used.',
      responseType: 'expired',
    },
    notFound: {
      responseType: 'notfound',
      description: 'The user has accessed a thread that has not joined.',
    },
  },

  fn: async function (inputs) {
    if (inputs.honeypot) {
      throw 'notFound';
    }

    if (!inputs.token) {
      throw 'invalidToken';
    }

    // Look up the user with this reset token.
    var userRecord = await User.findOne({ passwordResetToken: inputs.token }).populate('organization');
    if (userRecord.isNologin) {
      throw 'notFound';
    }

    if (!userRecord || userRecord.passwordResetTokenExpiresAt <= Date.now()) {
      // If no such user exists, or their token is expired, bail.
      throw 'invalidToken';
    }

    // Hash the new password.
    var bcrypt = require('bcrypt');
    var hashed = await bcrypt.hash(inputs.password, 10);

    var valueSet = {
      password: hashed,
      passwordResetToken: '',
      passwordResetTokenExpiresAt: 0,
    };

    if (inputs.language) {
      valueSet.languagePreference = inputs.language;
    }
    // Store the user's new password and clear their reset token so it can't be used again.
    await User.updateOne({ id: userRecord.id }).set(valueSet);

    // Log the user in.
    // (This will be persisted when the response is sent.)
    this.req.session.userId = userRecord.id;

    return { handleId: userRecord.organization.handleId };
  },
};
